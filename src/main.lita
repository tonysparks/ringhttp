
import "std/libc"
import "std/array"
import "std/string/builder"
import "std/string"
import "std/mem"

import "http_ring"
import "log"


struct ServerHandler {
}

func (this: *ServerHandler) handle(
    context: *RequestHandlerContext,
    status: Status
) : i32 {

    var body = ""
    if (status == Status.ERROR_NO_ROUTE_FOUND) {
        body = """
            <html>
                <body>
                    <div>
                        Unknown route for <b>%.*s</b>
                    </div>
                </body>
            </html>
        """
    }
    else {
        body = """
            <html>
                <body>
                    <div>
                        Sorry, an internal server error ocurred.
                    </div>
                </body>
            </html>
        """
    }
    var response = context.response
    response.type = ResponseType.BODY

    // TODO add mime type info..
    response.body.append(
        body,
        context.request.path.length,
        context.request.path.buffer
    )
    return 1
}


func EchoRequestHandler(context: *RequestHandlerContext) : i32 {
    var req = context.request
    var res = context.response

    var query = HttpQueryInit(context.allocator)
    req.parseQuery(&query)

    res.status = 200
    res.type = ResponseType.BODY
    res.body.append("{ \"query\": {")

    for(var i = 0; i < query.params.size(); i+=1) {
        var param = query.params.getPtr(i)
        if(i > 0) res.body.append(",")

        res.body.append("\"%.*s\": \"%.*s\"",
            param.name.length, param.name.buffer,
            param.value.length, param.value.buffer
        )
    }
    res.body.append("}}")
    return 1
}

func SubmitRequestHandler(context: *RequestHandlerContext) : i32 {
    var req = context.request
    var res = context.response

    res.status = 200
    res.type = ResponseType.BODY
    res.body.append("{ \"post_params\": {")

    if(req.bodyType == BodyType.FORM_URLENCODED) {
        for(var i = 0; i < req.formParams.size(); i+=1) {
            var param = req.formParams.getPtr(i)
            if(i > 0) res.body.append(",")

            res.body.append("\"%.*s\": \"%.*s\"",
                param.name.length, param.name.buffer,
                param.value.length, param.value.buffer
            )
        }
    }

    res.body.append("}}")
    return 1
}

func PathRequestHandler(context: *RequestHandlerContext) : i32 {
    var req = context.request
    var res = context.response
    var match = context.match

    var values = match.values

    res.status = 200
    res.type = ResponseType.BODY
    res.body.append("{ \"path_values\": {")
    for(var i = 0; i < values.numberOfEntries; i+=1) {
        var entry = match.template.entries[i]
        var value = &values.entries[i]

        if(i > 0) res.body.append(",")

        res.body.append("\"%.*s\": \"%.*s\"",
            entry.name.length, entry.name.buffer,
            value.length, value.buffer
        )
    }
    res.body.append("}}")
    return 1;
}


func main(len: i32, args: **char) : i32 {
    var config = HttpConfig {
        .allocator = defaultAllocator,
        .port = 8080_u16,
        .maxThreads = 1,
        .ioQueueDepth = 32,
    }

    LogInit("./ring.log")

    Info("Listening on port: %d\n", config.port)
    var server = HttpServer{};
    server.init(&config)

    var handler = ServerHandler{}
    server.errorHandler(&handler)
    server.notFoundHandler(&handler)

    server.addRequestHandler(
        HttpMethod.GET,
        "/echo",
        HttpController {
            .userData = &handler,
            .callback = EchoRequestHandler
        }
    )

    server.addRequestHandler(
        HttpMethod.POST,
        "/submit",
        HttpController {
            .userData = &handler,
            .callback = SubmitRequestHandler
        }
    )

    server.addRequestHandler(
        HttpMethod.GET,
        "/path/{id}",
        HttpController {
            .userData = &handler,
            .callback = PathRequestHandler
        }
    )

    var status = server.start()
    defer server.close()

    if(status != Status.OK) {
        Error("error starting server: %s\n", StatusAsStr(status))
        return 1;
    }

    return 0;
}
