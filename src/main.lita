
import "std/libc"
import "std/array"
import "std/string/builder"
import "std/string"
import "std/mem"
import "std/json"
import "std/io"

import "http_ring"




struct FileStream {
    file: File
}

func (this: *FileStream) read(buffer: *char, size: i32) : i32 {
    var startPosition = this.file.position()
    var status = this.file.readBytes(buffer, size as (usize))

    if(status == FileStatus.Ok) {
        return (this.file.position() - startPosition) as (i32)
    }
    return -1
}

struct ServerHandler {
}

func (this: *ServerHandler) handle(
    context: *RequestHandlerContext,
    status: Status
) : i32 {

    var body = ""
    if (status == Status.ERROR_NO_ROUTE_FOUND) {
        body = """
            <html>
                <body>
                    <div>
                        Unknown route for <b>%.*s</b>
                    </div>
                </body>
            </html>
        """
    }
    else {
        body = """
            <html>
                <body>
                    <div>
                        Sorry, an internal server error ocurred.
                    </div>
                </body>
            </html>
        """
    }
    var response = context.response
    response.type = ResponseType.BODY
    response.addHeaderStr("Content-Type", "text/html")

    // TODO add mime type info..
    response.body.append(
        body,
        context.request.path.length,
        context.request.path.buffer
    )
    return 1
}


func EchoRequestHandler(context: *RequestHandlerContext) : i32 {
    var req = context.request
    var res = context.response

    var query = HttpQueryInit(context.allocator)
    req.parseQuery(&query)

    res.status = 200
    res.type = ResponseType.BODY
    res.addHeaderStr("Content-Type", "application/json")

    res.body.append("{ \"query\": {")

    for(var i = 0; i < query.params.size(); i+=1) {
        var param = query.params.getPtr(i)
        if(i > 0) res.body.append(",")

        res.body.append("\"%.*s\": \"%.*s\"",
            param.name.length, param.name.buffer,
            param.value.length, param.value.buffer
        )
    }
    res.body.append("}}")
    return 1
}

func DownloadRequestHandler(context: *RequestHandlerContext) : i32 {
    var req = context.request
    var res = context.response

    res.status = 200
    res.type = ResponseType.STREAM
    res.addHeaderStr("Content-Type", "application/octet-stream")
    res.addHeaderStr("Content-Disposition", "attachment; filename=\"big_file.txt\"")

    var fileStream = new<FileStream>(context.allocator)
    fileStream.file.open("./ring.c", FileOpenOp.READ_ONLY)
    // TODO: Error handling..

    res.asStream(fileStream)

    return 1
}


func SubmitRequestHandler(context: *RequestHandlerContext) : i32 {
    var req = context.request
    var res = context.response

    res.status = 200
    res.type = ResponseType.BODY
    res.addHeaderStr("Content-Type", "application/json")

    res.body.append("{ ")

    res.body.append(" \"headers\": ")
    PrintHeaders(&req.headers, res, context.allocator)

    res.body.append(", ")

    res.body.append("\"body\": ")
    PrintBody(&req.body, res, context.allocator)

    res.body.append("} ")
    return 1
}

func PrintHeaders(headers: *Array<HttpHeader>, res: *HttpResponse, allocator: *const Allocator) {
    res.body.append("[")

    var sb = StringBuilderInit(1024, allocator)
    for(var i = 0; i < headers.size(); i+=1) {
        if(i > 0) res.body.append(",")

        var header = headers.getPtr(i)
        res.body.append("{ ")
        res.body.append("\"name\": \"%.*s\", ", header.name.length, header.name.buffer)

        JsonEscapeString(sb, header.values.buffer, header.values.length)
        res.body.append("\"value\": \"%.*s\"", sb.length, sb.buffer)
        res.body.append("} ")

        sb.clear()
    }
    res.body.append("]")
}

func PrintBody(body: *Body, res: *HttpResponse, allocator: *const Allocator) {
    switch(body.bodyType) {
        case BodyType.FORM_URLENCODED: {
            res.body.append("{ \"post_params\": {")
            for(var i = 0; i < body.formParams.size(); i+=1) {
                var param = body.formParams.getPtr(i)
                if(i > 0) res.body.append(",")

                res.body.append("\"%.*s\": \"%.*s\"",
                    param.name.length, param.name.buffer,
                    param.value.length, param.value.buffer
                )
            }
            res.body.append("}}")
            break
        }
        case BodyType.JSON: {
            if (body.json) {
                body.json.print(res.body)
            }
            break
        }
        case BodyType.MULTIPART_FORMDATA: {
            var multipart = body.multipart
            res.body.append("{ \"multi_part\": { ")
            res.body.append(" \"boundary\": \"%.*s\", ", multipart.boundary.length, multipart.boundary.buffer)

            res.body.append(" \"parts\": [")
            for(var i = 0; i < multipart.parts.size(); i+=1) {
                var part = multipart.parts.getPtr(i)
                if(i > 0) res.body.append(",")

                PrintBody(&part.body, res, allocator)
            }
            res.body.append("]}}")
            break
        }
        case BodyType.FORMDATA: {
            var sb = StringBuilderInit(body.formData.value.length + 32, allocator)
            JsonEscapeString(sb, body.formData.value.buffer, body.formData.value.length)

            res.body.append("{")
            res.body.append(" \"form_data\": {")
            res.body.append(" \"name\": \"%.*s\",", body.formData.name.length, body.formData.name.buffer)
            res.body.append(" \"filename\": \"%.*s\",", body.formData.filename.length, body.formData.filename.buffer)
            res.body.append(" \"value\": \"%.*s\"", sb.length, sb.buffer)
            res.body.append("  }")
            res.body.append("}")
            break
        }
        default: {
            var sb = StringBuilderInit(body.length + 32, allocator)
            JsonEscapeString(sb, body.buffer, body.length)

            res.body.append("{ \"body\": ")
            res.body.append("\"%.*s\"", sb.length, sb.buffer)
            res.body.append("}")
            break
        }
    }
}

func PathRequestHandler(context: *RequestHandlerContext) : i32 {
    var req = context.request
    var res = context.response
    var match = context.match

    var values = match.values

    res.status = 200
    res.type = ResponseType.BODY
    res.body.append("{ \"path_values\": {")
    for(var i = 0; i < values.numberOfEntries; i+=1) {
        var entry = match.template.entries[i]
        var value = &values.entries[i]

        if(i > 0) res.body.append(",")

        res.body.append("\"%.*s\": \"%.*s\"",
            entry.name.length, entry.name.buffer,
            value.length, value.buffer
        )
    }
    res.body.append("}}")
    return 1;
}


func main(len: i32, args: **char) : i32 {
    var config = HttpConfig {
        .allocator = defaultAllocator,
        .port = 8080_u16,
        .maxThreads = 1,
        .ioQueueDepth = 64,
        .isLogEnabled = true,
        .maxPoolSize = 512,
        .keepAliveTimeoutInSec = 5,
    }

    var server = HttpServer{};
    server.init(&config)

    var handler = ServerHandler{}
    server.errorHandler(&handler)
    server.notFoundHandler(&handler)

    server.addRequestHandler(
        HttpMethod.GET,
        "/echo",
        HttpController {
            .userData = &handler,
            .callback = EchoRequestHandler
        }
    )

    server.addRequestHandler(
        HttpMethod.POST,
        "/submit",
        HttpController {
            .userData = &handler,
            .callback = SubmitRequestHandler
        }
    )

    server.addRequestHandler(
        HttpMethod.GET,
        "/download",
        HttpController {
            .userData = &handler,
            .callback = DownloadRequestHandler
        }
    )

    server.addRequestHandler(
        HttpMethod.GET,
        "/path/{id}",
        HttpController {
            .userData = &handler,
            .callback = PathRequestHandler
        }
    )

    var status = server.start()
    defer server.close()

    if(status != Status.OK) {
        printf("error starting server: %s\n", StatusAsStr(status))
        return 1;
    }

    return 0;
}
