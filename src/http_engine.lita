import "std/net"
import "std/libc"
import "std/thread"
import "std/mem"
import "std/mem/bucket_allocator"
import "std/mem/linear_allocator"
import "std/mem/thread_safe_allocator"
import "std/string/builder"
import "std/string/buffer"
import "std/string"
import "std/array"
import "std/io"
import "std/libc/signal"
import "std/atomic"
import "std/assert"
import "std/system"

// posix specific
import "std/net/posix_socket"
import "pipe_posix"

import "liburing"

import "http_connection"
import "http_parser"
import "http_common"
import "http_request"
import "http_response"
import "http_header"
import "http_file"
import "http_server"
import "http_router"
import "http_context"

import "log"

@foreign
func strerror(errnum: i32) : *const char;

internal struct HttpRingEngine {
    config: using *HttpConfig
    safeAllocator: ThreadSafeAllocator
    serverSocket: Socket

    // IO Uring for socket Accepts
    accept: io_uring

    requests: ContextPool

    distribution: u64
    skippedAcceptRequest: i32
    acceptSubmits: i32

    isRunning: Atomic<bool>

    router: Router

    errorHandler: HttpHandler
    notFoundHandler: HttpHandler
    filterHandlers: Array<HttpFilterHandler>
}

internal func (this: *HttpRingEngine) init(config: *HttpConfig) {
    this.config = config
    this.distribution = 0_u64

    this.safeAllocator.init(config.allocator)
    this.router.init(config.allocator)
    this.requests.init(config.maxPoolSize, this, config.allocator)

    this.filterHandlers.init(32, config.allocator)

    if(!config.disableSignal) {
        signal(SIGINT, signal_handler);
    }
}

public func (this: *HttpRingEngine) allocx(context: *RequestContext) {
    var maxMemInBytes = this.config.maxRequestSizeInBytes

    var mem = this.safeAllocator.alloc(maxMemInBytes * sizeof(:char))
    if(!mem) {
        // TODO: Handle out of memory more gracefully
        Error("out of memory!\n")
        exit(1);
    }

    context.requestAllocator.init(
        mem,
        maxMemInBytes
    )
}

internal func (this: *HttpRingEngine) addRequestHandler(
    method: HttpMethod,
    path: *const char,
    controller: *HttpController
) : Status {
    if(!this.router.register(method, path, controller)) {
        return Status.ERROR_UNABLE_TO_REGISTER_HANDLER
    }

    return Status.OK
}

internal func (this: *HttpRingEngine) setErrorHandler(errorHandler: HttpHandler) {
    this.errorHandler = errorHandler
}

internal func (this: *HttpRingEngine) setNotFoundHandler(notFoundHandler: HttpHandler) {
    this.notFoundHandler = notFoundHandler
}

internal func (this: *HttpRingEngine) addFilterHandler() {
    // TODO - add in router
}

internal func (this: *HttpRingEngine) listen() : Status {
    this.close()

    this.isRunning.init(true)

    io_uring_queue_init(this.config.ioQueueDepth, &this.accept, 0/*IORING_SETUP_SQPOLL*/);

    if(!this.serverSocket.create()) {
        return Status.ERROR_UNABLE_TO_CREATE_SERVER_SOCKET
    }

    defer this.serverSocket.close()

    var enableReuse = 1
    this.serverSocket.setSocketOpt(SocketOption.SO_REUSEADDR, &enableReuse, sizeof(:i32))

    if(!FromPort(this.config.port, &this.serverSocket.address)) {
        return Status.ERROR_CREATING_ADDRESS
    }

    if(!this.serverSocket.bind()) {
        return Status.ERROR_SOCKET_BIND
    }

    if(!this.serverSocket.listen()) {
        return Status.ERROR_SOCKET_LISTEN
    }

    var ring = &this.accept

    // prime the pump, dispatch a request for socket accepts
    this.queueAcceptRequest(ring)

    var cqe: *io_uring_cqe = null;

    while(true) {
        if(this.skippedAcceptRequest > 0) {
            if(this.queueAcceptRequest(ring)) {
                this.skippedAcceptRequest = 0
            }
        }

        var result = io_uring_wait_cqe(ring, &cqe);
        this.handleCompletionRing(ring, cqe, result)

        io_uring_cqe_seen(ring, cqe)

        io_uring_submit(ring)

        // Timeout any http connections past TTL
        this.checkTimeouts()
    }

    return Status.OK
}


internal func (this: *HttpRingEngine) close() {
    this.isRunning.set(false)

    this.filterHandlers.free()

    this.serverSocket.close()
    this.safeAllocator.free()

    if(this.accept.ring_fd > 0) {
        io_uring_queue_exit(&this.accept)
    }
}



func (this: *HttpRingEngine) queueAcceptRequest(ring: *io_uring): bool {
    var index = this.requests.alloc()
    if(index < 0) {
        this.skippedAcceptRequest += 1

        Warn("RequestContext Pool has been exhausted, delaying accept request. Number of skipped requests: %d\n", this.skippedAcceptRequest)
        goto error;
    }

    var request = this.requests.get(index)
    assert(request != null)

    request.index = index
    request.requests = &this.requests
    request.state = RequestState.CONNECTED

    request.begin()

    var sqe = io_uring_get_sqe(ring)
    if(!sqe) {
        Error("Error creating SQE for server socket\n")
        goto error;
    }

    io_uring_prep_accept(
        sqe,
        this.serverSocket.handle(),
        (&request.clientAddr) as (*sockaddr),
        &request.clientAddrLen,
        0
    )

    this.acceptSubmits += 1

    io_uring_sqe_set_data(sqe, request)
    io_uring_submit(ring)

    return true;

error:
    return false;
}

func (this: *HttpRingEngine) queueReadHttpRequest(ring: *io_uring, clientSocket: i32, request: *RequestContext) {
    Info("Reading HTTP request for socket: %d state: %s\n", clientSocket, RequestStateAsStr(request.state))

    request.state = RequestState.READ_REQUEST_LINE

    var connection = &request.connection
    connection.socket.socket = clientSocket

    var sqe = io_uring_get_sqe(ring)
    if(!sqe) {
        Error("Error creating SQE for socket: %d\n", clientSocket)
        goto error;
    }

    var readBuffer = &connection.readBuffer

    // Listen for bytes from the client, store them in
    // our readBuffer, this may take multiple reads to complete
    // the full client socket payload
    io_uring_prep_read(
        sqe,
        clientSocket,
        &readBuffer.buffer[readBuffer.length],
        readBuffer.remaining(),
        0
    )

    io_uring_sqe_set_data(sqe, request)
    io_uring_submit(ring)

error:
    return;
}

func (this: *HttpRingEngine) queueWriteHttpResponse(
    ring: *io_uring,
    request: *RequestContext) {

    request.state = RequestState.WRITTEN_HTTP_RESPONSE

    var connection = &request.connection
    var response = &request.response

    connection.bufferContents(response)

    Info("Writing Http Response (%d): \n%.*s\n",
        connection.handle(),
        connection.writeBuffer.length, connection.writeBuffer.buffer)


    var iov = iovec {
        .iov_base = connection.writeBuffer.buffer,
        .iov_len  = connection.writeBuffer.length,
    }

    var msg = msghdr {
        .msg_iov = &iov,
        .msg_iovlen = 1,
    }


    // Send the HTTP response to the client socket
    var sqe = io_uring_get_sqe(ring)
    if(!sqe) {
        Error("Error creating SQE for socket: %d\n", connection.handle())
        goto error;
    }

    var moreContents = (response.type != ResponseType.BODY)
    io_uring_prep_sendmsg(
        sqe,
        connection.handle(),
        &msg,
        moreContents ? SocketFlags.MSG_MORE : 0
    )

    io_uring_sqe_set_data(sqe, request)

    // If we have more contents, let's link
    // this submission with the next one, so they are delivered
    // in proper order
    if(response.type == ResponseType.FILE) {
        sqe.flags |= IOSQE_IO_LINK
    }

    request.submissions += 1
    io_uring_submit(ring)

    if(moreContents) {
        if(response.type == ResponseType.FILE) {
            request.state = RequestState.WRITTEN_HTTP_RESPONSE_MORE
            this.queueWriteHttpFileResponse(ring, request)
        }
        else {
            assert(response.type == ResponseType.STREAM)
            request.state = RequestState.WRITING_STREAM
        }
    }

error:
    return;
}

func (this: *HttpRingEngine) queueWriteHttpStreamResponse(
    ring: *io_uring,
    request: *RequestContext) {

    request.state = RequestState.WRITING_STREAM

    var connection = &request.connection
    var response = &request.response
    if(!response.stream.__this) {
        Error("No stream attached to connection: %d\n", connection.handle())
        goto error;
    }

    var writeBuffer = &connection.writeBuffer
    writeBuffer.clear()

    // Read the stream contents
    var numberOfBytesRead = response.stream.read(response.body.buffer, response.body.capacity)
    var moreContents = numberOfBytesRead > 0

    if(!moreContents) {
        request.state = RequestState.WRITTEN_HTTP_RESPONSE
        writeBuffer.append("0\r\n\r\n")
    }
    else {

        if(!writeBuffer.reserve(numberOfBytesRead + 16)) {
            // Error out as we are not able to meet capacity requirements
            Error(
                "Unable to handle stream of %d bytes due to out of memory for connection: %d\n",
                numberOfBytesRead,
                connection.handle()
            )
            goto error;
        }

        writeBuffer.append("%08X\r\n", numberOfBytesRead)
        response.body.length = numberOfBytesRead
        response.body.copyTo(writeBuffer.buffer + writeBuffer.length, numberOfBytesRead, false)

        writeBuffer.length += numberOfBytesRead
        writeBuffer.appendStrn("\r\n", 2)
    }

    // Send the bytes over the TCP connection
    var iov = iovec {
        .iov_base = connection.writeBuffer.buffer,
        .iov_len  = connection.writeBuffer.length,
    }

    var msg = msghdr {
        .msg_iov = &iov,
        .msg_iovlen = 1,
    }

    var sqe = io_uring_get_sqe(ring)
    if(!sqe) {
        Error("Error creating SQE for socket: %d\n", connection.handle())
        goto error;
    }

    io_uring_prep_sendmsg(
        sqe,
        connection.handle(),
        &msg,
        moreContents ? SocketFlags.MSG_MORE : 0
    )

    io_uring_sqe_set_data(sqe, request)

    request.submissions += 1
    io_uring_submit(ring)

error:
// TODO: Handler error scenarios, either send back an http 500 or if no memory kill the
// client connection..
    return;
}

func (this: *HttpRingEngine) queueWriteHttpFileResponse(
    ring: *io_uring,
    request: *RequestContext) {

    request.state = RequestState.WRITTEN_FILE

    var response = &request.response
    var connection = &request.connection

    var fileFd = response.fileHandle
    var fileSize = response.fileSize
    var socketFd = connection.handle()


    /*
        Must move the file on disk thru a pipe to client socket:
        File => Pipe => ClientSocket
    */

    if(pipe2(request.pipes, O_CLOEXEC | O_NONBLOCK) < 0) {
        Error("Error creating pipes!")
        goto error;
    }


    // move the file to the pipe
    {
        var sqe = io_uring_get_sqe(ring)
        if(!sqe) {
            Error("Error creating SQE for socket: %d\n", socketFd)
            goto error;
        }

        io_uring_prep_splice(
            sqe,
            response.fileHandle,
            0_i64,
            request.pipes[1],
            -1_i64,
            response.fileSize as (u32),
            0
        )
        sqe.flags |= IOSQE_IO_LINK

        io_uring_sqe_set_data(sqe, request)
    }

    // move the pipe to the socket
    {
        var sqe = io_uring_get_sqe(ring)
        if(!sqe) {
            Error("Error creating SQE for socket: %d\n", socketFd)
            goto error;
        }

        io_uring_prep_splice(
            sqe,
            request.pipes[0],
            -1_i64,
            connection.handle(),
            -1_i64,
            response.fileSize as (u32),
            0
        )
        sqe.flags |= IOSQE_IO_LINK

        io_uring_sqe_set_data(sqe, request)
    }

    // close out the file
    {
        var sqe = io_uring_get_sqe(ring)
        if(!sqe) {
            Error("Error creating SQE for socket: %d\n", socketFd)
            goto error;
        }

        io_uring_prep_close(
            sqe,
            response.fileHandle
        )

        io_uring_sqe_set_data(sqe, request)
    }

    request.submissions += 3
    io_uring_submit(ring)

error:
    return;
}



func (this: *HttpRingEngine) handlePartialHttpRequest(
    ring: *io_uring,
    requestAllocator: *const Allocator,
    request: *RequestContext,
    bytesRead: i32) : Status {

    var connection = &request.connection
    var readBuffer = &connection.readBuffer

    readBuffer.length += bytesRead

    var buffer = readBuffer.asString()
    if(request.requestLineIndex < 1) {
        request.requestLineIndex = buffer.endIndexOf("\r\n")
        if(request.requestLineIndex < 0) {
            if(readBuffer.remaining() < this.config.maxHttpRequestLineSizeInBytes) {
                readBuffer.reserve(readBuffer.capacity + this.config.maxHttpRequestLineSizeInBytes as (i32))
            }

            Info("RequestLine not fully read, dispatching another io-read for connection: %d\n", connection.handle())
            return Status.PARTIAL_REQUEST_DISPATCHING_READ
        }

        if(request.requestLineIndex > this.config.maxHttpRequestLineSizeInBytes) {
            Error("RequestLine of size '%d' exceeded max request limit of '%d' for connection: %d\n",
                request.requestLineIndex,
                this.config.maxHttpRequestLineSizeInBytes,
                connection.handle()
            )
            return Status.ERROR_INVALID_REQUEST_PATH_EXCEEDED_LIMIT
        }
    }

    if(request.headerIndex < 1) {
        request.headerIndex = buffer.endIndexOf("\r\n\r\n")
        if(request.headerIndex < 0) {
            if(readBuffer.remaining() < this.config.maxHttpHeaderSizeInBytes) {
                readBuffer.reserve(readBuffer.capacity + this.config.maxHttpHeaderSizeInBytes as (i32))
            }

            Info("Headers not fully read, dispatching another io-read for connection: %d\n", connection.handle())
            return Status.PARTIAL_REQUEST_DISPATCHING_READ
        }

        if(request.headerIndex > this.config.maxHttpHeaderSizeInBytes) {
            Error("Headers of size '%d' exceeded max request limit of '%d' for connection: %d\n",
                request.headerIndex,
                this.config.maxHttpHeaderSizeInBytes,
                connection.handle()
            )
            return Status.ERROR_INVALID_HEADER_EXCEEDED_LIMIT
        }

        request.bodyIndex = request.headerIndex
    }

    // we've read the http header part, now
    // let's ensure we've read the entire body
    var parser = HttpParser{}
    parser.init(requestAllocator)

    var input = String {
        .buffer = readBuffer.buffer,
        .length = request.headerIndex
    }

    var httpRequest = &request.request
    var ok = parser.parse(input, httpRequest)
    if(ok != ParseStatus.OK) {
        Error("Error parsing http request: %s\n", ParseStatusAsStr(ok))
        return Status.ERROR_PARSING_HTTP_REQUEST
    }

    if(httpRequest.flags & HttpFlags.CHUNKED_ENCODING) {
        var status = parser.parseChunk(readBuffer.asString().substring(request.headerIndex), httpRequest)
        if(status == ParseStatus.CHUNK_INCOMPLETE) {
            Info("Chunked Body not fully read, dispatching another io-read for connection: %d\n", connection.handle())
            return Status.PARTIAL_REQUEST_DISPATCHING_READ
        }

        if(status != ParseStatus.OK) {
            Error("Error parsing chunk encoding for http request: %s\n", ParseStatusAsStr(status))
            return Status.ERROR_PARSING_HTTP_REQUEST
        }
    }
    else if(httpRequest.flags & HttpFlags.CONTENT_LENGTH_PROVIDED) {
        var bodyLength = httpRequest.bodyLength
        if(this.config.maxHttpBodySizeInBytes > 0 && bodyLength > this.config.maxHttpBodySizeInBytes) {
            Error("Body of size '%d' exceeded max request limit of '%d' for connection: %d\n",
                bodyLength,
                this.config.maxHttpBodySizeInBytes,
                connection.handle()
            )
            return Status.ERROR_INVALID_BODY_EXCEEDED_LIMIT
        }

        if(readBuffer.length - request.headerIndex < bodyLength) {
            if(readBuffer.remaining() < 1 * MiB) {
                readBuffer.reserve(readBuffer.capacity + 1 * MiB as (i32))
            }

            Info("Body not fully read, dispatching another io-read for connection: %d\n", connection.handle())
            return Status.PARTIAL_REQUEST_DISPATCHING_READ
        }
    }
    else  {
        var body = readBuffer.asString().substring(request.headerIndex)
        if(!body.empty()) {
            // No chunked encoding and no content-length header, return back invalid request
            return Status.ERROR_UNKNOWN_BODY_LENGTH
        }
    }


    // we are ready to handle the full request
    return Status.OK
}

func (this: *HttpRingEngine) handleHttpRequest(
    ring: *io_uring,
    requestAllocator: *const Allocator,
    request: *RequestContext) : Status {

    var connection = &request.connection

    var buffer = &connection.readBuffer
    Info("Begin handling HTTP Request for socket: %d\n%.*s\n", connection.handle(), buffer.length, buffer.buffer)

    var parser = HttpParser{}
    parser.init(requestAllocator)

    var input = StringInit(buffer.buffer, buffer.length).substring(request.bodyIndex)

    var httpRequest = &request.request;

    // Since chunked encoding is handled by reading the full
    // payload from the client, if this a chunked encoding from
    // the client, don't use the raw readBuffer, instead use the
    // chunkData buffer that contains the decoded data
    if(httpRequest.flags & HttpFlags.CHUNKED_ENCODING) {
        input = httpRequest.body.chunkData.asString()
    }

    var ok = parser.parseBody(input, httpRequest)
    if(ok != ParseStatus.OK) {
        Error("Error parsing http request: %s\n", ParseStatusAsStr(ok))
        return Status.ERROR_PARSING_HTTP_REQUEST
    }

    connection.disableKeepAlive = httpRequest.flags & HttpFlags.DISABLE_KEEP_ALIVE

    switch(httpRequest.method) {
        case HttpMethod.GET: {

            // determine if this is a file request
            if(httpRequest.path.startsWith(this.fileServerPath)) {
                // TODO: Cache File contents
                var file: File;
                var fileStatus = OpenFile(this.fileServerPath, httpRequest.path, &file)
                if(fileStatus != Status.OK) {
                    return fileStatus
                }

                request.file = file.handle()

                var response = &request.response;
                response.status = 200
                response.type = ResponseType.FILE
                response.fileHandle = file.handle()
                response.fileSize = file.length()

                // TODO add mime type info..
                this.queueWriteHttpResponse(ring, request)
                return Status.OK
            }
            break
        }
        case HttpMethod.POST:
        case HttpMethod.PUT:
        case HttpMethod.PATCH:
        case HttpMethod.OPTIONS:
        case HttpMethod.DELETE: {
            break
        }
    }

    var requestContext = RequestHandlerContext {
        .allocator = requestAllocator,
        .request = httpRequest,
        .response = &request.response,
        .userData = null,
        .match = null
    }

    var requestMatch: RouteMatch;
    if(!this.router.match(httpRequest.method, httpRequest.path, &requestMatch)) {
        this.server404(&requestContext, Status.ERROR_NO_ROUTE_FOUND)
    }
    else {

        var controller = requestMatch.controller
        Info("Found a match: %.*s\n", requestMatch.template.template.length, requestMatch.template.template.buffer)

        requestContext.userData = controller.userData
        requestContext.match = &requestMatch

        if(controller.callback(&requestContext) != 1) {
            this.serverError(&requestContext, Status.ERROR_CONTROLLER_CALLBACK_ERROR)
        }
    }

    this.queueWriteHttpResponse(ring, request)

    Info("Done handling HTTP Request for socket: %d\n", connection.handle())
    return Status.OK
}

func (this: *HttpRingEngine) sendServerError(
    request: *RequestContext,
    status: Status,
    ring: *io_uring
) {
    var httpRequest = HttpRequest{}
    var requestContext = RequestHandlerContext {
        .allocator = &request.requestAllocator.allocator,
        .request = &httpRequest,
        .response = &request.response,
        .userData = null,
        .match = null
    }

    this.serverError(requestContext, status)
    this.queueWriteHttpResponse(ring, request)
}

func (this: *HttpRingEngine) serverError(
    requestContext: *RequestHandlerContext,
    status: Status
) {
    var request = requestContext.request
    var response = requestContext.response

    Error("Internal Error handling request: %s %.*s\n",
        HttpMethodAsStr(request.method),
        request.path.length, request.path.buffer
    )

    response.status = 500

    if (this.errorHandler.__this) {
        this.errorHandler.handle(
            requestContext,
            status
        )
    }
    else {
        // TODO add mime type info..
        response.type = ResponseType.BODY
        response.body.append("Internal Error handling the request.")
    }
}

func (this: *HttpRingEngine) server404(
    requestContext: *RequestHandlerContext,
    status: Status
) {
    var request = requestContext.request
    var response = requestContext.response

    Error("Could not find match for request: %s %.*s\n",
        HttpMethodAsStr(request.method),
        request.path.length, request.path.buffer
    )

    response.status = 404

    if (this.notFoundHandler.__this) {
        this.notFoundHandler.handle(
            requestContext,
            status
        )
    }
    else {
        // TODO add mime type info..
        response.type = ResponseType.BODY
        response.body.append("No route bound.")
    }
}

func (this: *HttpRingEngine) sendBadRequest(
    context: *RequestContext,
    status: Status,
    ring: *io_uring
) {
    var httpRequest = HttpRequest{}
    var requestContext = RequestHandlerContext {
        .allocator = &context.requestAllocator.allocator,
        .request = &httpRequest,
        .response = &context.response,
        .userData = null,
        .match = null
    }

    var request = requestContext.request
    var response = requestContext.response

    Error("Bad request (%s) for request: %s %.*s\n",
        StatusAsStr(status),
        HttpMethodAsStr(request.method),
        request.path.length, request.path.buffer
    )

    response.status = 400

    // TODO add mime type info..
    response.type = ResponseType.BODY
    switch(status) {
        case Status.ERROR_INVALID_REQUEST_PATH_EXCEEDED_LIMIT:
            response.body.append(
                "Request exceeded the max request limit of %d bytes for request line\n",
                this.config.maxHttpRequestLineSizeInBytes
            )
            break
        case Status.ERROR_INVALID_HEADER_EXCEEDED_LIMIT:
            response.body.append(
                "Request exceeded the max request limit of %d bytes for headers\n",
                this.config.maxHttpHeaderSizeInBytes
            )
            break
        case Status.ERROR_INVALID_BODY_EXCEEDED_LIMIT:
            response.status = 413
            response.body.append(
                "Request exceeded the max request limit of %d bytes for request body\n",
                this.config.maxHttpBodySizeInBytes
            )
            break
        case Status.ERROR_UNKNOWN_BODY_LENGTH: {
            response.body.append(
                "Missing Content-Length or Transfer-Encoding\n"
            )
            break
        }
        default: {
            response.body.append(
                "Bad request\n",
                this.config.maxHttpBodySizeInBytes
            )
            break
        }
    }

    this.queueWriteHttpResponse(ring, context)
}


func signal_handler(signo: i32) {
    Info("caught signal SIGPIPE for %d\n", signo)
    if(signo == SIGINT) {
        Info("Signal for shutdown received\n")
        exit(0)
    }
}

func (this: *HttpRingEngine) handleCompletionRing(ring: *io_uring, cqe: *io_uring_cqe, result: i32) {

    // Determine if there was an error reading the accept socket request
    if(result < 0 || !cqe) {
        Error("Error reading accept socket socket: %d\n", result)
        return;
    }

    // If the accept socket request completed, but the result contains an error
    if(cqe.res < 0) {
        Error("Error accepting socket.res: %d (%s)\n", cqe.res, strerror(-cqe.res))

        // Force close the connection
        var request = io_uring_cqe_get_data(cqe) as (*RequestContext)
        if(request) {
            Error("Force closing connection: %d due to error\n", request.connection.handle())
            request.finish(.forceClose = true)
        }
        return;
    }

    var request = io_uring_cqe_get_data(cqe) as (*RequestContext)
    assert(request != null)

    request.lastRequestTime = SystemTimeMSec()
    var connection = &request.connection
    // Info("Setting lastRequest time for socket: %d to %f\n", connection.handle(), request.lastRequestTime)

    switch(request.state) {
        // Server just accepted a client connection
        case RequestState.CONNECTED: {
            this.acceptSubmits -= 1
            Info("CONNECTED: socket: %d subs: %d index: %d accepts: %d\n", cqe.res, request.submissions, request.index, this.acceptSubmits)

            // queue up another accept
            this.queueAcceptRequest(ring)

            // queue up delegation of handling the http request
            this.queueReadHttpRequest(ring, cqe.res, request)
            break;
        }
        // The connection was established, and we've read
        // the client socket contents for the HTTP request line
        case RequestState.READ_REQUEST_LINE: {
            var bytesRead = cqe.res
            Info("READ_REQUEST_LINE: %d for socket: %d subs: %d\n", bytesRead, connection.handle(), request.submissions)

            // The client has gracefully closed their connection
            if(bytesRead == 0) {
                Info("Client Closed socket: %d\n", connection.handle())
                request.finish(.forceClose = true)
                break;
            }

            var allocator = &request.requestAllocator.allocator

            var status = this.handlePartialHttpRequest(
                ring,
                allocator,
                request,
                bytesRead
            )

            if(status == Status.PARTIAL_REQUEST_DISPATCHING_READ) {
                this.queueReadHttpRequest(ring, connection.handle(), request)
                break
            }

            if(status != Status.OK) {
                switch(status) {
                    case Status.ERROR_UNKNOWN_BODY_LENGTH:
                    case Status.ERROR_INVALID_REQUEST_PATH_EXCEEDED_LIMIT:
                    case Status.ERROR_INVALID_HEADER_EXCEEDED_LIMIT:
                    case Status.ERROR_INVALID_BODY_EXCEEDED_LIMIT: {
                        this.sendBadRequest(request, status, ring)
                        break
                    }
                    default: {
                        this.sendServerError(request, status, ring)
                        break
                    }
                }
                break
            }

            // queue up delegation of handling the http response
            status = this.handleHttpRequest(
                ring,
                allocator,
                request
            )

            if(status != Status.OK) {
                Error("HTTP Request Bad Status %s with index: %d\n", StatusAsStr(status), request.index)
                this.sendServerError(request, status, ring)
            }
            break
        }
        case RequestState.WRITING_STREAM: {
            request.submissions -= 1

            this.queueWriteHttpStreamResponse(ring, request)
            break;
        }
        // The connection request was parsed, we have dispatched
        // an http response to the client socket
        case RequestState.WRITTEN_HTTP_RESPONSE:
        case RequestState.WRITTEN_HTTP_RESPONSE_MORE:
        case RequestState.WRITTEN_FILE: {
            request.submissions -= 1
            Info("%s for socket: %d subs: %d index: %d\n",
                RequestStateAsStr(request.state),
                connection.handle(),
                request.submissions,
                request.index
            )

            if(request.submissions <= 0) {
                request.begin() // ready to begin another HTTP request cycle

                // listen for close socket from client
                this.queueReadHttpRequest(ring, connection.handle(), request)
            }
            break
        }

        default: {
            assert(false)
            break;
        }
    }
}

func (this: *HttpRingEngine) checkTimeouts() {
    /*
    const timeout = this.config.keepAliveTimeoutInSec
    const currentTime = SystemTimeMSec()

    Info("Checking timeouts\n")
    for(var i = 0; i < this.requests.pool.size(); i+=1) {
        var context = this.requests.pool.getPtr(i)
        if(context.inUse && context.connection.isConnected() && context.lastRequestTime + timeout < currentTime) {

            Info("HTTP connection timedout socket: %d (index: %d) -> %f vs. %f\n",
                context.connection.handle(),
                context.index,
                context.lastRequestTime + timeout,
                currentTime
            )
            // TODO: Causes crashing
            // context.finish(.forceClose = true)
        }
    }
    */
}