import "std/string"
import "std/string/builder"
import "std/array"
import "std/libc"
import "std/assert"
import "std/mem"
import "std/json"
// import "std/json/from_json"
// import "std/json/to_json"

import "http_parser"


@asStr
public enum HttpMethod {
    INVALID,
    GET,
    PUT,
    HEAD,
    POST,
    TRACE,
    PATCH,
    DELETE,
    OPTIONS,
    CONNECT,
}

@asStr
public enum BodyType {
    UNKNOWN,
    MALFORMED_INPUT,
    FORM_URLENCODED,
    JSON,
    MULTIPART_FORMDATA,
    FORMDATA,
}

public enum HttpFlags {
    DISABLE_KEEP_ALIVE  = (1<<0),
    CHUNKED_ENCODING    = (1<<1),
    GZIP_ENCODING       = (1<<2),
    DEFLATE_ENCODING    = (1<<3),
    COMPRESSED_ENCODING = (1<<4),

    CONTENT_LENGTH_PROVIDED = (1<<5),

    UPGRADE_REQUEST         = (1<<6),
    WEB_SOCKET_PROTOCOL     = (1<<7),

    ACCEPT_GZIP_ENCODING    = (1<<8),
    ACCEPT_DEFLATE_ENCODING = (1<<9),
}

/**
    The parsed out request
*/
public struct HttpRequest {
    method: HttpMethod
    path: String
    query: String
    version: String

    flags: i32
    bodyLength: i32

    payload: using Payload
}


public func (this: *HttpRequest) reset() {
    this.flags = 0
    this.bodyLength = 0
    this.headers.clear()
    this.method = HttpMethod.INVALID
    this.bodyType = BodyType.UNKNOWN
}

public struct Payload {
    headers: Array<HttpHeader>
    body: using Body
}

public struct Body {
    body: using String

    bodyType: BodyType
    union {
        formParams: Array<FormParam>
        json: *JsonNode
        multipart: MultiPart
        formData: FormData
        chunkData: StringBuilder
    }
}

public struct MultiPart {
    boundary: String
    parts: Array<Part>
}

public struct Part {
    payload: using Payload
}

public struct FormParam {
    name: String
    value: String
}

public struct FormData {
    name: String
    filename: String
    value: String
}

public struct WebSocketUpgrade {
    upgrade: String
    connection: String
    secKey: String
    secVersion: String
}

public struct HttpHeader {
    name: String
    values: String
}

public func HttpHeaderFrom(name: *const char, values: *const char) : HttpHeader {
    return HttpHeader {
        .name = StringInit(name),
        .values = StringInit(values)
    }
}

public struct QueryParam {
    name: String
    value: String
}

public struct HttpQuery {
    params: Array<QueryParam>
}

public struct HttpPathValues {
    entries: [MAX_TEMPATE_ENTRIES]String
    numberOfEntries: i32
}

public struct HttpPathEntry {
    name: String
    index: i32
}

public const MAX_TEMPATE_ENTRIES = 32

public struct HttpPathTemplate {
    template: String
    entries: [MAX_TEMPATE_ENTRIES]HttpPathEntry
    numberOfEntries: i32
}

public func (this: *Payload) getHeaderValue(name: String) : String {
    for(var i = 0; i < this.headers.size(); i+=1) {
        var header = this.headers.getPtr(i)
        if(header.name.equalsIgnoreCase(name)) {
            return header.values
        }
    }

    return String{}
}

public func ParsePathTemplateStr(
    pathTemplate: *const char,
    result: *HttpPathTemplate
) : ParseStatus {
    var template = StringInit(pathTemplate)
    return ParsePathTemplate(&template, result)
}

public func ParsePathTemplate(
    pathTemplate: *String,
    result: *HttpPathTemplate
) : ParseStatus {

    result.template = *pathTemplate
    result.numberOfEntries = 0

    var index = 0
    var startIndex = -1
    var diff = 0

    while(index < pathTemplate.length) {
        var c = pathTemplate.buffer[index]
        if(c == '{') {
            if(startIndex >= 0) {
                return ParseStatus.ERROR_INVALID_TEMPLATE_NAME_START
            }
            startIndex = index
        }
        else if(c == '}') {
            if(startIndex < 0) {
                return ParseStatus.ERROR_INVALID_TEMPLATE_NAME_END
            }

            var entry = &result.entries[result.numberOfEntries]
            entry.name.buffer = &pathTemplate.buffer[startIndex + 1]
            entry.name.length = index - (startIndex + 1)
            entry.index = diff

            result.numberOfEntries += 1
            startIndex = -1
            diff = -1
        }

        index += 1

        if(startIndex < 0) {
            diff += 1
        }
    }

    if(startIndex >= 0) {
        return ParseStatus.ERROR_INVALID_TEMPLATE_NAME_END
    }

    return ParseStatus.OK
}

public func ParsePathValues(
    template: *HttpPathTemplate,
    path: *String,
    result: *HttpPathValues) : ParseStatus {

    var index = 0
    for(var i = 0; i < template.numberOfEntries; i+=1) {
        var entry = &template.entries[i]

        if(index + entry.index >= path.length) {
            return ParseStatus.ERROR_INVALID_TEMPLATE_NAME_START
        }

        index += entry.index
        var startIndex = index

        while(index < path.length) {
            var c = path.buffer[index]
            if(c == '/' || c == '?') {
                break;
            }

            index += 1
        }

        var value = &result.entries[result.numberOfEntries]
        value.buffer = &path.buffer[startIndex]
        value.length = index - startIndex
        result.numberOfEntries += 1
    }

    return ParseStatus.OK
}

public func HttpQueryInit(allocator: *const Allocator) : HttpQuery {
    var query = HttpQuery{}
    query.params.init(16, allocator)
    return query
}

public func (this: *HttpRequest) parseQuery(result: *HttpQuery) : ParseStatus {
    if(this.query.empty()) {
        return ParseStatus.OK;
    }

    var params = this.query.split($"&")
    while(params.hasNext()) {
        var entry = params.next()
        if(entry.empty()) {
            continue
        }

        var valueIndex = entry.endIndexOf($"=")

        var queryParam = QueryParam{}
        if(valueIndex  < 0) {
            queryParam.name = entry
        }
        else {
            queryParam.name = entry.substring(0, valueIndex - 1)
            queryParam.value = entry.substring(valueIndex)
        }

        result.params.add(queryParam)
    }

    return ParseStatus.OK
}


@test
func testQueryParams() {
    var queryParam = HttpQueryInit(defaultAllocator)
    var queryRequest = HttpRequest{}

    // Test empty
    {
        queryParam.params.clear()
        queryRequest.query = StringInit("")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.empty())
    }

    // Test 1
    {
        queryParam.params.clear()
        queryRequest.query = StringInit("name=value")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 1)

        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString("name"))
            assert(n.value.equalsString("value"))
        }
    }

    // Test 2
    {
        queryParam.params.clear()
        queryRequest.query = StringInit("name=value&thing1=thing2")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 2)

        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString("name"))
            assert(n.value.equalsString("value"))
        }

        {
            var n = queryParam.params.get(1)
            assert(n.name.equalsString("thing1"))
            assert(n.value.equalsString("thing2"))
        }
    }

    // Missing '='
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("name")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 1)
        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString("name"))
            assert(n.value.equalsString(""))
        }
    }

    // Missing '=' with '&'
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("name&value")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 2)
        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString("name"))
            assert(n.value.equalsString(""))
        }
        {
            var n = queryParam.params.get(1)
            assert(n.name.equalsString("value"))
            assert(n.value.equalsString(""))
        }
    }

    // Double '='
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("name=x=y")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 1)
        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString("name"))
            assert(n.value.equalsString("x=y"))
        }
    }

    // Double '=' with '&'
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("name=x=y&thing1=thing2")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 2)
        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString("name"))
            assert(n.value.equalsString("x=y"))
        }

        {
            var n = queryParam.params.get(1)
            assert(n.name.equalsString("thing1"))
            assert(n.value.equalsString("thing2"))
        }
    }

    // Trailing '&'
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("name=x&")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 1)
        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString("name"))
            assert(n.value.equalsString("x"))
        }
    }

    // Only '&'
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("&")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.empty())
    }

    // String of '&&&&'
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("&&&&&")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.empty())
    }

    // String of '======'
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("====")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 1)
        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString(""))
            assert(n.value.equalsString("==="))
        }
    }

    // String of '=&=&=&'
    {

        queryParam.params.clear()
        queryRequest.query = StringInit("=&=&=&")
        queryRequest.parseQuery(&queryParam)
        assert(queryParam.params.size() == 3)
        {
            var n = queryParam.params.get(0)
            assert(n.name.equalsString(""))
            assert(n.value.equalsString(""))
        }
        {
            var n = queryParam.params.get(1)
            assert(n.name.equalsString(""))
            assert(n.value.equalsString(""))
        }
        {
            var n = queryParam.params.get(2)
            assert(n.name.equalsString(""))
            assert(n.value.equalsString(""))
        }
    }
}