import "std/net"
import "std/libc"
import "std/thread"
import "std/thread/thread_pool"
import "std/mem"
import "std/mem/bucket_allocator"
import "std/mem/thread_safe_allocator"
import "std/string/builder"
import "std/string"
import "std/array"
import "std/io"
import "std/libc/signal"

import "liburing"

import "http_connection"
import "http_parser"
import "http_common"
import "http_request"
import "http_response"
import "http_header"
import "http_file"
import "http_engine"
import "http_router"
import "log"

public struct HttpServer {
    engine: HttpRingEngine
}

public trait HttpHandler {
    handle: func(*RequestHandlerContext, Status) : i32;
}

public trait HttpFilterHandler {
    handleFilter: func(*RequestHandlerContext, *HttpFilterHandler) : i32;
}

public struct HttpConfig {
    allocator: *const Allocator //= defaultAllocator
    port: u16 = 8080_u16

    minThreads: i32 = 1
    maxThreads: i32 = 32

    // maximum client HTTP request size in bytes
    maxHttpRequestSizeInBytes: usize = 10 * MiB

    maxHttpRequestLineSizeInBytes: usize = 8 * KiB
    maxHttpHeaderSizeInBytes: usize = 8 * KiB
    maxHttpBodySizeInBytes: usize = 64 * MiB // 0 for no limit

    // the bucket size for the bucket memory allocator for request allocator
    requestBucketSizeInBytes: usize = 2 * MiB

    // static file directory
    fileServerPath: *const char = "/static/"


    // io_uring queue depth
    ioQueueDepth: i32 = 32

    // logging
    logFilePath: *const char = "./ring.log"
    isLogEnabled: bool = true

    // command line handling
    disableSignal: bool = false
}


public func (this: *HttpServer) errorHandler(errorHandler: HttpHandler) {
    this.engine.setErrorHandler(errorHandler)
}

public func (this: *HttpServer) notFoundHandler(notFoundHandler: HttpHandler) {
    this.engine.setNotFoundHandler(notFoundHandler)
}

public func (this: *HttpServer) addRequestHandler(
    method: HttpMethod,
    path: *const char,
    controller: HttpController) : Status {

    if(!this.engine.router.register(method, path, controller)) {
        return Status.ERROR_UNABLE_TO_REGISTER_HANDLER
    }

    return Status.OK
}

public func (this: *HttpServer) init(config: *HttpConfig) : Status {
    this.engine.init(config)
    return Status.OK
}

public func (this: *HttpServer) start() : Status {
    if(this.engine.config.isLogEnabled) {
        LogInit(this.engine.config.logFilePath)
    }

    Info("listening on port: %d\n", this.engine.config.port)
    return this.engine.listen()
}

public func (this: *HttpServer) close() {
    this.engine.close()
}
