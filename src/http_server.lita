import "std/net"
import "std/libc"
import "std/thread"
import "std/thread/thread_pool"
import "std/mem"
import "std/mem/bucket_allocator"
import "std/mem/thread_safe_allocator"
import "std/string_buffer"
import "std/string_view"
import "std/array"
import "std/io"
import "std/libc/signal"

import "liburing"

import "http_connection"
import "http_parser"
import "http_common"
import "http_request"
import "http_response"
import "http_header"
import "http_file"

import "http_engine"

public struct HttpServer {
    engine: HttpRingEngine
}

public trait HttpCallback {
    handleRequest: func(*RequestHandlerContext) : i32;
    handleError: func(*RequestHandlerContext, Status) : i32;
}

public struct HttpConfig {
    allocator: *const Allocator //= defaultAllocator
    port: u16 = 8080_u16

    minThreads: i32 = 1
    maxThreads: i32 = 32

    // maximum client HTTP request size in bytes
    maxHttpRequestSizeInBytes: usize = 10 * MiB

    // the bucket size for the bucket memory allocator for request allocator
    requestBucketSizeInBytes: usize = 2 * MiB

    // static file directory
    fileServerPath: *const char = "/static/"


    // io_uring queue depth
    ioQueueDepth: i32 = 32
}

//public typedef func(*RequestHandlerContext) : i32 as RequestHandler;

public struct RequestHandlerContext {
    allocator: *const Allocator
    request: *HttpRequest
    response: *HttpResponse
    //userData: *void
}

public func (this: *HttpServer) callbackHandler(callback: HttpCallback) {
    this.engine.callback = callback
}


public func (this: *HttpServer) start(config: *HttpConfig) : Status {
    return this.engine.listen(config)
}

public func (this: *HttpServer) close() {
    this.engine.close()
}
