import "std/net"
import "std/array"
import "std/string_buffer"
import "std/thread"
import "std/mem"
import "std/io"

import "http_request"
import "http_response"
import "http_header"
import "http_common"
import "http_file"

public struct HttpConnection {
    id: u32
    socket: Socket
    writeBuffer: StringBuffer
    readBuffer: StringBuffer
}

public func (this: *HttpConnection) send(response: *HttpResponse) : Status {
    if(response.status > 512) {
        response.status = 500;
    }

    // Status Line
    this.writeBuffer.append("HTTP/1.1 %d %s\r\n",
        response.status, STATUS_CODES[response.status]
    )

    // Headers
    for(var i = 0; i < response.headers.size(); i += 1) {
        var header = response.headers.get(i)
        this.writeBuffer.append("%.*s: %.*s\r\n",
            header.name.length, header.name.buffer,
            header.values.length, header.values.buffer
        )
    }
    this.writeBuffer.append("Content-Length: %d\r\n", response.body.length)

    // Blank Line + Body
    this.writeBuffer.append("\r\n%.*s",
        response.body.length, response.body.buffer
    )

    this.socket.write(this.writeBuffer.buffer, this.writeBuffer.length)
}

public func (this: *HttpConnection) sendFile(response: *HttpResponse, file: *File) : Status {
    if(response.status > 512) {
        response.status = 500;
    }

    // Status Line
    this.writeBuffer.append("HTTP/1.1 %d %s\r\n",
        response.status, STATUS_CODES[response.status]
    )

    // Headers
    for(var i = 0; i < response.headers.size(); i += 1) {
        var header = response.headers.get(i)
        this.writeBuffer.append("%.*s: %.*s\r\n",
            header.name.length, header.name.buffer,
            header.values.length, header.values.buffer
        )
    }
    this.writeBuffer.append("Content-Length: %d\r\n", file.length())

    // Blank Line
    this.writeBuffer.appendStrn("\r\n", 2)
    // this.socket.write(this.writeBuffer.buffer, this.writeBuffer.length)

    return SendFile(this, response, file)
}

public func (this: *HttpConnection) free() {
    this.writeBuffer.free()
    this.readBuffer.free()
    this.socket.close()
}


public struct HttpConnections {
    allocator: *const Allocator
    connections: Array<HttpConnection>
}

public func (this: *HttpConnections) init(allocator: *const Allocator) {
    this.allocator = allocator
    this.connections = ArrayInit<HttpConnection>(1024, this.allocator)
}

public func (this: *HttpConnections) free() {
    this.connections.free()
}

public func (this: *HttpConnections) add(allocator: *const Allocator, clientSocket: Socket) {
    var c = HttpConnection {}

    c.id = this.connections.size()
    c.socket = clientSocket
    c.writeBuffer.init(1024, allocator)
    c.readBuffer.init(1024, allocator)

    this.connections.add(c)
}